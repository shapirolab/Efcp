#! /bin/sh
#
#  This module is part of EFCP.
#
#     Copyright 2007 Avraham Houri
#     Weizmann Institute of Science, Rehovot, Israel
#
#  EFCP is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  EFCP is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with EFCP; if not, see:
#
#      http://www.gnu.org/licenses
#
#  or write to:
#
#       Free Software Foundation, Inc.
#       Franklin Street, Fifth Floor
#       Boston, MA 02110-1301 USA
#
#      contact: bill@wisdom.weizmann.ac.il
#
#
# Install the Logix system.
#
# This shell script creates five files
#
#   LogixCommand		- an executable file (CurrentDir/Logix)
#   Emulator/fcp		- the fcp emulator
#   system/.logix_cold_start	- a Logix script which builds a saved version
#				  of the Logix System
#   SuperDir/.logix		- a Logix script which terminates the save
#				  of the Logix System
#   SavedLogix			- a saved version of the Logix System
#
# The file  system/.logix_cold_start  is removed following the run.
# The file  SuperDir/.logix  is removed following the run.
# Arguments:
#
# 	1  : Emulator   (default EMULATOR)
#       2  : SubSystem  (default logix)
#	3+ : Emulator arguments (may be quoted - e.g. "-h60000 -tr100000")
#
# Examples:
#
#       % install
#       % install biospi
#       % install LINUX -h30000
#       % install SGI spifcp -h60000 -tr80000
#

Version=2.5.0

CurrentDir=${PWD:-`pwd`}

if test -d "${1}"; then
  Emulator=${1}
  shift ;
else
  Emulator=EMULATOR
fi

case ${1} in logix | spifcp | biospi)
  SubSystem=${1}
  shift ;;
                                ${1})
  SubSystem=logix ;;
esac ;

Logix=`echo ${Emulator} | tr '[A-Z]' '[a-z]'`

if test ${Emulator} = EMULATOR ; then
  StartLogix=${SubSystem}
  StartName="${SubSystem} ${Version}"
  SavedLogix=saved_${SubSystem} ;
else
  StartLogix=${Logix}_${SubSystem}
  StartName="${Emulator} ${SubSystem} ${Version}"
  SavedLogix=saved_${Logix}_${SubSystem}
fi

# To alter startup signature, add/modify the following definitions.
case ${SubSystem} in logix)
  SuperDir=${CurrentDir}/system/Logix_Users
  SuperId=["'Logix_Users'",system] ;;
                     spifcp)
  SuperDir=${CurrentDir}/system/Logix_Users/SpiFcp_Users
  SuperId=["'SpiFcp_Users'","'Logix_Users'",system] ;;
                     biospi)
  SuperDir=${CurrentDir}/system/Logix_Users/SpiFcp_Users/BioSpi_Users
  SuperId=["'BioSpi_Users'","'SpiFcp_Users'","'Logix_Users'",system] ;;
esac

Restart=.logix

CommandDir=${CurrentDir}

FcpPath=${CurrentDir}/${Emulator}/fcp

echo making ${FcpPath} ...
make -C ${Emulator}

BinPath=${CurrentDir}/Bin
SavePath=${CurrentDir}/${SavedLogix}
BootPath=${BinPath}/boot.bin
BootTerminal=${BinPath}/boot_terminal.bin
TerminalObject=${CurrentDir}/boot_terminal.bin
ColdPath=${CurrentDir}/system/.logix_cold_start
ClosePath=${SuperDir}/${Restart}

LogixCommand=${CommandDir}/${StartLogix}

echo writing ${LogixCommand}
rm -f ${LogixCommand}
cat <<EOF > ${LogixCommand}
#! /bin/sh
exec ${FcpPath} \$* ${SavePath}
EOF
chmod 775 ${LogixCommand}

echo writing ${ColdPath}

cat <<EOF > ${ColdPath}
% *****************  L O G I X   C O L D   S T A R T **********************
shell_computation(delegate_unknown);shell_computation(ignore_lost)
to_context(processor#link(lookup(ctl,_)))
load(get_module)
cd(transform)
    load([dfcp,evaluate,inherit])
cd(super#library_server)
    to_context(system_text#string(SystemText))
    to_context(spi_library#string(SpiText))
    to_context(string_text#string(StringText))
    to_context(timer_text#string(TimerText))
    defer(SystemText,close(system_text))
    defer(SpiText,close(spi_library))
    defer(StringText,close(string_text))
    defer(TimerText,close(timer_text))
cd(super#compile)
    to_context(string(SystemText,[],_))
    unbind(SystemText)
    to_context(string(SpiText,[],_))
    unbind(SpiText)
    to_context(string(StringText,[],_))
    unbind(StringText)
    to_context(string(TimerText,[],_))
    unbind(TimerText)
    load(control)
cd(super#ndg)
load([phase0,phase1,phase2,assemble])
cd(${SuperId})
reset;service(error)
defer(Saved,to_context(shell_server#user('${CurrentDir}','${Restart}')))
unbind; %
  to_context(save#save('${SavedLogix}',"Open Source ${StartName}",Saved))

EOF

echo writing ${ClosePath}
rm -f ${ClosePath}
cat <<EOF > ${ClosePath}
to_context(processor#device(quit))
EOF

echo building ${SavePath} ...
rm -f ${SavePath} ${TerminalObject}
cp ${BootTerminal} ${TerminalObject}
${FcpPath} $* ${BootPath}
chmod 664 ${SavePath}

echo removing ${ColdPath} ${ClosePath}
rm -f ${ColdPath} ${ClosePath} ${TerminalObject}
